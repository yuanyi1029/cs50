----------------------------------- Compiler ----------------------------------
converts human written source code to computer understandable machine code
source code -> compiler -> machine code (understandable by computers)

we used 'make filename' in week 1, but 'make' command actually uses clang 
compiler (an actual compiler)
week 1 compile method: make filename
week 2 compile method: clang -o machinecodefilename filename -lcs50
// -lcs50 links the cs50 library to our code
// -l + library name (depending on what library you use, not just cs50 library)

----------------------------- Steps of Compiling ------------------------------
Step 1: Pre-processing
#include <stdio.h>
#include <cs50.h>
The compiler will find standard.io and cs50 libraries from /usr/include and 
will load the source code of the libraries at the top of the program for usage. 
Lines of code with hashes '#' at the start are loaded first for pre-processing

Step 2: Compiling
The compiler converts source code to assembly language (low level language) 

Step 3: Assembling
The compiler assembles the assembly language to machine code (0s & 1s)

Step 4: Linking
The compiler links the user's code with all the libraries that were included 
into a group of 0s and 1s

------------------------------ Debugging Methods ------------------------------
1) Use print statements
2) Use debugging tools in vscode by stating a break/stop point and then use step
   over or step in to slowly look at each step and find the error 
   (we use 'debug50 filename' in cs50) 
3) Use rubber duck debugging (sound out the problem to yourself/friends verbally)
   
-------------------------- Memory Size of Data Types --------------------------
int     (4 byte)            bool    (1 byte)
long    (8 byte)            char    (1 byte)
float   (4 byte)            string  (? bytes)
double  (8 byte)


------------------------------------ Arrays -----------------------------------
An array is a block of adjacent spaces in memory 
int x[3]                    // declaring an integer array x of length 3 
x[0] = 72
x[1] = 73
x[2] = 33

int x[] = {72, 73, 33}    // another way to initialise array (static, size can't change anymore)

passing arrays into functions as parameters:
int average (int x[])       // specifying that the parameter is an array
{
    // function (do something)
}

----------------------------------- Strings -----------------------------------
Strings are actually just an array of characters (char)
If a string has n number of characters, it will be n+1 bytes long. This is because 
the computer stores an extra '\0' character to represent the end of a string  

Getting the length of a string:
1) Use strlen function from string.h library
    #include <string.h>
    int length = strlen(word)


2) Do it manually with a counter and a loop
    int counter = 0
    while (word[counter] != '\0')   // counter++ if each character is not \0 (last character)
    {
        counter++
    }
    return counter


Converting a string to Uppercase:
1) Use toupper() function from ctype.h library
    #include <ctype.h>
    for (int i = 0; i < strlen(word); i++)
    {
        printf("%c", toupper(word[i]));
    }

2) Get each character of the string and subtract it by 32 (based on ASCII table) 
    for (int i = 0; i < strlen(word); i++)
    {
        if (word[i] >= 'a' && word[i] <= 'z')
        {
            printf("%c", word[i] - 32);
        }
        else
        {
            printf("%c", word[i]);
        }
    }

Comparing 2 string:
1) Use strcmp() function from string.h library
    #include(string.h)
    if (strcmp(word1, word2) == 0)      // If the 2 strings are equal, it will return 0 
    {
        // functon (do something)
    }

---------------------------- Command Line Arguments ---------------------------
Command line arguments are arguments that are collected at the terminal before the program runs

To accept Command line arguments, declare main like this:
    int main (int argc, string argv[])
    {
        // function (do something)
    }
where argv is an array of arguments, and argc is the length of the array (number of arguments)
 
--------------------------------- Cryptography --------------------------------
(Plaintext + key) -> Cipher -> Ciphertext
A cipher is just an algorithm (program) that encrypts plaintext to ciphertext 