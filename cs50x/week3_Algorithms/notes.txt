------------------------------ Searching Algorithms ---------------------------
Searching Algorithms are used to find an element in an array

Types of Searching Algorithms:
1) Linear Search - search sequentially 
2) Binary Search - search by constantly halving 

Linear Search: 
Loops through the entire array from left to right until the element is found

Binary Search: 
Starts at the middle of the array, determine if the element is lower or higher, 
then go to the middle of the upper / lower section and repeat the process until
the element is found (array must be sorted orderly to use binary search)

------------------------------- Sorting Algorithms ----------------------------
Sorting Algorithms sorts an array of elements

Types of Algorithms for sorting:
1) Selection Sort - sorting by finding smallest and place it accordingly
2) Bubble Sort  - sorting by comparing 2 elements and swap places, repeat until sorted 
3) Merge Sort - sorting 2 halves and compare the smallest element of each halve

Selection Sort:
Loops through the entire array, look for the smallest element and swap places
with the first element of the unsorted part 

Bubble Sort:
Loops through the array constantly checking between 2 elements and swap places if
the elements are in the wrong order, repeat this process until the array is sorted
(generally moves high values to the right and low values to the left)

Merge Sort:
Sort 2 halves of the array, compare the smallest element of each halve, then
get the smallest element and put it in a new array 


-------------------------------- Running Time ---------------------------------
All algorithms have a running time which represents roughly how fast / slow the algorithm is
(represented by O)

Slowest to Fastest running times:  
O(n ^ 2) > O(n log n) > O(n) > O(log n) > O(1)          

Linear search has a running time of O(n)
Binary search has a running time of O(log n)

Linear sort has a running time of O(n ^ 2) 
Bubble sort has a running time of O(n ^ 2)           
Bubble sort has a running time of O(n log n)           
 
-------------------------------- Data Structure -------------------------------
Data structures are a specialized way of storing and processing data 
Arrays are a type of data structure that allows us to store data back-to-back
Modern programming languages allows us to invent our own data structures

Implementing a new data structure:
    typedef struct
    {
        // variables
    }
    structure_name

---------------------------------- Recursion ----------------------------------
A programming technique that makes a function call itself as part of its execution

Basic reuirements for a recursive function:
Base case           (will terminate the recusive process when triggered)
Recursive case      (function calls itself that solves a smaller range of the problem)
